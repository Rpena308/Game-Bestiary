@model DataObjects.Beast

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Beast</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.GameID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("GameID", new List<SelectListItem>()
           {
               new SelectListItem{Text="Pathfinder", Value = "Pathfinder" },
               new SelectListItem{Text="Dungeons and Dragons", Value = "Dungeons and Dragons" }
           })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AlignmentID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("AlignmentID", new List<SelectListItem>()
           {
               new SelectListItem{Text="Lawful Good", Value = "Lawful Good" },
               new SelectListItem{Text="Neutral", Value = "Neutral" },
               new SelectListItem{Text="Neutral Evil", Value = "Neutral Evil" }
           })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BeastTypeID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("BeastTypeID", new List<SelectListItem>()
           {
               new SelectListItem{Text="Humanoid", Value = "Humanoid" },
               new SelectListItem{Text="Ooze", Value = "Ooze" }
           })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BeastSubTypeID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("BeastSubTypeID", new List<SelectListItem>()
           {
               new SelectListItem{Text="Aquatic", Value = "Aquatic" },
               new SelectListItem{Text="Human", Value = "Human" },
               new SelectListItem{Text="Undead", Value = "Undead" }
           })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TerrainID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("TerrainID", new List<SelectListItem>()
           {
               new SelectListItem{Text="Aquatic", Value = "Aquatic" },
               new SelectListItem{Text="Desert", Value = "Desert" }
           })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BeastSizeID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("BeastSizeID", new List<SelectListItem>()
           {
               new SelectListItem{Text="Large", Value = "Large" },
               new SelectListItem{Text="Small", Value = "Small" }
           })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BeastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BeastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BeastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ChallengeRating, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ChallengeRating, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ChallengeRating, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Treasure, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Treasure, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Treasure, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Experience, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Experience, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Experience, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BeastDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BeastDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BeastDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Active)
                    @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "BeastList")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
